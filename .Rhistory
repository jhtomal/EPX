load("C:/Users/jtomal/Desktop/EPX_JSS/R_Package/EPX/data/harvest.rda")
harvest
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("pandoc")
library("pandoc")
BNsample <-
read.csv("/Users/grace/Documents/Dropbox/directory_R/dataBNsample.csv")
BNsample <-
read.csv("C:/Users/jtomal/Desktop/EPX_JSS/R_Package/EPX/tests/TESTING/dataBNsample.csv")
BNsample <- BNsample[,-1]
dim(BNsample)
head(BNsample)
library(usethis)
usethis::use_data(BNsample, compress = "xz")
BNhold <-
read.csv("C:/Users/jtomal/Desktop/EPX_JSS/R_Package/EPX/tests/TESTING/dataBNsampleholdout.csv")
BNhold <- BNhold[,-1]
dim(BNhold)
head(BNhold)
usethis::use_data(BNhold, compress = "xz")
install.packages("rngtools")
install.packages("foreach")
install.packages("randomForest")
library(available)
install.packages("available")
library(available)
available("epx")
available("epx")
install.packages("doSNOW")
library(doSNOW)
install.packages("doRNG")
library(doRNG)
install.packages("rngtools")
install.packages("rngtools")
library("rngtools")
library(epx)
?epx
??epx
?AHR
??AHR
library(epx)
BNsample
head(BNsample)
warnings()
library(epx)
library(epx)
library(epx)
?epx
BNsample
epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 150))
model <- epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 150))
str(model)
model$PHALANXES
summary(model)
pred0 <- predict(model)
all.equal(pred0, model$ENSEMBLED.FITS)
preds <- predict(model, classifier.args = list(ntree=500))
all.equal(preds, model$ENSEMBLED.FITS)
predshold0 <- predict(mode, newdata = BNhold[,-25])
predshold0 <- predict(model, newdata = BNhold[,-25])
predshold <- predict(model, newdata = BNhold[,-25], classifier.args = list(ntree = 500))
all.equal(predshold, model$ENSEMBLED.FITS)
all.equal(predshold0, model$ENSEMBLED.FITS)
cv150 <- cv.epx(model)
cv500 <- cv.epx(model, classifier.args = list(ntree = 500))
tail(cv500)
?epx
cluster <- parallel::detectCores()
cluster
cl <- parallel::makeCluster(clusters)
cl <- parallel::makeCluster(cluster)
doSNOW::registerDoSNOW(cl)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(cluster)
doSNOW::registerDoSNOW(cl)
model <- epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 500), computing = "parallel")
plot(model)
parallel::stopCluster(cl)
q()
library(epx)
?AHR
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(usethis)
use_github(protocol = "https")
use_git(protocol = "https")
use_github(protocol = "https")
y
## AHR when there are no ties in phat:
resp <- c(1, 0, 0, 0, 1)
prob <- (1:5)*0.1
AHR(y = resp, phat = prob)
# expect answer: 1/2 * (1 + 0 + 0 + 0 + 2/5)
resp <- c(1, 1, 0,   0,   0,   0,   0,    1,   0, 0)
prob <- c(1, 1, 1, 0.4, 0.4, 0.3, 0.2, 0.15, 0.1, 0)
AHR(y = resp, phat = prob)
# expect answer: 1/3 * (2/3 + 1/2 * (1/3 + 2/3) + 1/3 * 4/3 +
#                       1/8 * (2/3 + 2/3 + 2/3 + 1))
## IE when there are no ties in phat:
resp <- c(1, 1, 0,   0,   0,   0,   0,    1,   0, 0)
prob <- (10:1) * 0.1
IE(y = resp, phat = prob, cutoff = 3)
# expect answer: (2/3) / (3/10)
## IE when there are ties
resp <- c(1, 1, 0,   0,   0,   0,   0,    1,   0, 0)
prob <- c(1, 1, 1, 0.4, 0.4, 0.3, 0.2, 0.15, 0.1, 0)
IE(y = resp, phat = prob, cutoff = 3)
# expect answer: same as above
## without ties in phat
resp <- c(rep(1, 50), rep(0, 50))
prob <- (1:100)*0.01
RKL(y = resp, phat = prob) # expect 100
resp <- c(rep(0, 50), rep(1, 50))
RKL(y = resp, phat = prob) # expect 50
## with ties in phat
resp <- sample(c(1, 0), 100, replace = TRUE)
prob <- rep(1, 100)
RKL(y = resp, phat = prob) # expect 100
## with ties in phat
resp <- c(0, rep(1, 99))
prob <- rep(1, 100)
TOP1(y = resp, phat = prob)  # expect 0
resp <- c(1, 1, 1, rep(0, 95), 1, 1)
prob <- c(1, 1, 1, rep(0, 97))
TOP1(y = resp, phat = prob)  # expect 1
## no ties in phat
resp <- c(0, rep(1, 99))
prob <- (100:1)*0.01
TOP1(y = resp, phat = prob)  # expect 0
resp <- c(1, rep(0, 99))
TOP1(y = resp, phat = prob)  # expect 1
BNhold
head(BNhold)
BNsample
head(BNsample)
harvest
head(harvest)
## Phalanx-formation using a base classifier with 150 trees (default is 500)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
set.seed(761)
model.cv <- cv.epx(model)
preds.cv <- model.cv[-nrow(model.cv), ncol(model.cv)]
cv.hc <- hit.curve(phat = as.numeric(preds.cv), y = model$Y)
## Phalanx-formation using a base classifier with 150 trees (default is 500)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
## See how phalanx-membership of variables at all four steps
## (0 means not in a phalanx.)
(model$PHALANXES)
summary(model)
clusters <- parallel::detectCores() / 2
clusters
clusters <- parallel::detectCores()
clusters
cl <- parallel::makeCluster(clusters)
doSNOW::registerDoSNOW(cl)
set.seed(761)
model.par <- epx(x = harvest[, -4], y = harvest[, 4],
computing = "parallel")
parallel::stopCluster(cl)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
set.seed(761)
cv.200 <- cv.epx(model, classifier.args = list(ntree = 200))
tail(cv.200) # see performance (here, AHR) for all phalanxes and the ensemble
set.seed(761)
cv.folds <- cv.epx(model, folds.out = TRUE)
tail(cv.folds[[1]])  # same as first example
table(cv.folds[[2]])  # number of observations in each of the 10 folds
set.seed(761)
cv.ahr <- NULL  # store AHR of each ensemble
for (i in 1:10) {
cv.i <- cv.epx(model)
cv.ahr <- c(cv.ahr, cv.i[nrow(cv.i), ncol(cv.i)])
}
boxplot(cv.ahr)  # to see variation in AHR
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
## Hit curve for model with default settings
model.hc <- plot(model)
model.hc$nhitlast
## Hit curve with max.cutoff at 150
model.hc.150 <- plot(model, max.cutoff = 150)
model.hc.150$nhitlast  # Number of hits in top 150 ranked observations.
model.hc.150 <- plot(model, max.cutoff = 150)
model.hc.150 <- plot(model)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
all.equal(predict(model), model$ENSEMBLED.FITS)
## Predict training values using more than 150 trees
set.seed(761)
preds500 <- predict(model, classifier.args = list(ntree = 500))
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
summary(model)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 150))
all.equal(predict(model), model$ENSEMBLED.FITS)
set.seed(761)
preds500 <- predict(model, classifier.args = list(ntree = 500))
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 500))
set.seed(761)
preds500 <- predict(model, classifier.args = list(ntree = 500))
library(epx)
?predict
?predict.epx
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 500))
## Predict training values without additional classifier.args and newdata
## returns the object's ENSEMBLED.FITS
all.equal(predict(model), model$ENSEMBLED.FITS)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 500))
all.equal(predict(model), model$ENSEMBLED.FITS)
all.equal(predict.epx(model), model$ENSEMBLED.FITS)
?predict
model <- epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 150))
str(model)
model$PHALANXES
summary(model)
plot(model)
plot(model)
model <- epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 150))
plot(model)
pred0 <- predict(model)
all.equal(pred0, model$ENSEMBLED.FITS)
preds <- predict(model, classifier.args = list(ntree = 500))
all.equal(preds, model$ENSEMBLED.FITS)
?all.equal
library(epx)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 500))
model
predict(model)
all.equal(predict(model), model$ENSEMBLED.FITS)
set.seed(761)
preds500 <- predict(model, classifier.args = list(ntree = 500))
preds500
pred <- predict(model)
pred
cbind(pred, preds500)
model
set.seed(761)
model <- epx(x = BNsample[, -25], y = BNsample[, 25],
classifier.args = list(ntree = 500))
model
plot(model)
predict(model)
predict(model, BNhold)
predict(model, BNhold[,-25])
phold <- predict(model, BNhold[,-25])
phold
dim(phold)
length(phold)
ptrain <- predict(model)
ptrain
length(ptrain)
length(phold)
phold <- predict(model, BNhold[,-25], classifier.args = list(ntree = 1000))
phold
phold <- predict(model, classifier.args = list(ntree = 1000))
phold
cbind(ptrain, phold)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 500))
model
FUNS <- .getBaseClassifier(classifier = (object$BASE.CLASSIFIER.ARGS)[[1]],
classifier.args)
FUNS <- .getBaseClassifier(classifier = (model$BASE.CLASSIFIER.ARGS)[[1]],
classifier.args)
model$BASE.CLASSIFIER.ARGS
model$BASE.CLASSIFIER.ARGS[[1]]
classifier.args <- list(ntree = 500)
FUNS <- .getBaseClassifier(classifier = (model$BASE.CLASSIFIER.ARGS)[[1]],
classifier.args)
model$BASE.CLASSIFIER.ARGS
model$BASE.CLASSIFIER.ARGS[[1]]
model$BASE.CLASSIFIER.ARGS[[2]]
epx.classifier.args <- model$BASE.CLASSIFIER.ARGS[[2]]
epx.classifier.args
length(epx.classifier.args)
classifier.args
?missing
newdata <- NULL
missing(newdata)
missing(a)
colnames(model$X)
head(harvest)
newdata <- harvest[,-4]
colnames(newdata)
colnames(newdata) %in% colnames(model$X)
colnames(model$X) %in% colnames(newdata)
names1 <- c("x", "y", "z")
names2 <- c("x", "y", "z")
names1 %in% names2
names2 %in% names1
names2 <- c("x", "y")
names1 %in% names2
!names1 %in% names2
names2 %in% names1
!names2 %in% names1
model$PHALANXES
model$PHALANXES[[4]]
colnames(model$X)
cbind(model$X, y = model$Y)
set.seed(761)
model <- epx(x = BNsample[, -25], y = BNsample[, 4],
classifier.args = list(ntree = 500))
set.seed(761)
model <- epx(x = BNsample[, -25], y = BNsample[, 25],
classifier.args = list(ntree = 500))
model$PHALANXES
model$PHALANXES[[4]]
set.seed(1)
model <- epx(x = BNsample[, -25], y = BNsample[, 25],
classifier.args = list(ntree = 500))
model$PHALANXES[[4]]
set.seed(1)
model <- epx(x = BNsample[, -25], y = BNsample[, 25],
classifier.args = list(ntree = 150))
set.seed(2)
model <- epx(x = BNsample[, -25], y = BNsample[, 25],
classifier.args = list(ntree = 150))
?hit.curve
?cv.epx
?plot.epx
?hit.curve
?cv.epx
library(epx)
?hit.curve
%in%
?%in%
all(1:6 %in% 0:36)
!all(1:6 %in% 0:36)
library(epx)
set.seed(761)
model <- epx(x = harvest[, -4], y = harvest[, 4],
classifier.args = list(ntree = 500))
predict(model)
all.equal(predict(model), model$ENSEMBLED.FITS)
set.seed(761)
preds500 <- predict(model, classifier.args = list(ntree = 500))
preds500
set.seed(761)
model <- epx(x = BNsample[, -25], y = BNsample[, 25],
classifier.args = list(ntree = 500))
predict(model)
all.equal(predict(model), model$ENSEMBLED.FITS)
set.seed(761)
preds500 <- predict(model, classifier.args = list(ntree = 500))
preds500
pred0 <- predict(model)
cbind(pred0, preds500)
?predict.epx
set.seed(761)
preds500 <- predict(model, newdata = BNhold[,-25], classifier.args = list(ntree = 500))
preds500
tools::package_native_routine_registration_skeleton(".")
library(epx)
library(epx)
library(epx)
library(usethis)
usethis::use_pkgdown()
install.packages("pkgdown")
library("pkgdown")
usethis::use_pkgdown()
library(epx)
library(epx)
library("pkgdown")
usethis::use_pkgdown()
library(epx)
devtools::use_build_ignore("epx-Ex_i386.Rout")
model = epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 500))
str(model)
model$PHALANXES
summary(model)
plot(model)
library(epx)
model = epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 500))
library(epx)
model = epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 150))
summary(model)
library(epx)
model.log = epx(x = BNsample[,-25], y = BNsample[,25], classifier = "logistic")
model.log$PHALANXES
model.nn = epx(x = BNsample[,-25], y = BNsample[,25], classifier = "neural", classifier.args = list(size = 2))
summary(model.nn)
model = epx(x = BNsample[,-25], y = BNsample[,25], classifier.args = list(ntree = 500))
predshold <- predict(model, newdata = BNhold[,-25], classifier.args = list(ntree = 500))
AHR(y = BNhold$y, phat = predshold)
IE(y = BNhold$y, phat = predshold)
TOP1(y = BNhold$y, phat = predshold)
RKL(y = BNhold$y, phat = predshold)
library(epx)
library(epx)
library(usethis)
use_vignette("EPX_VIGNETTE")
git config --global user.name "Jabed Tomal"
git config --global user.name "Jabed Tomal"
git config --global jhtomal "Jabed Tomal"
file.exists("~/.ssh/id_rsa.pub")
library(epx)
library(devtools)
devtools::install_github("jhtomal/EPX")
git
git clone https://github.com/jhtomal/EPX.git
git
devtools::install_github()
devtools::install_github("jhtomal/EPX")
