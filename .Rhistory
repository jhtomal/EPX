AHR(y = BNhold$y, phat = predshold)
IE(y = BNhold$y, phat = predshold)
TOP1(y = BNhold$y, phat = predshold)
RKL(y = BNhold$y, phat = predshold)
rank <- (BNhold$y)[order(predshold)]
which(rank == 1)
BN <- rbind(BNsample, BNhold)
clusters <- parallel::detectCores()          # number of jobs simultaneously
cl <- parallel::makeCluster(clusters)  # make clusters
doSNOW::registerDoSNOW(cl)             # use the above clusters
parallel::stopCluster(cl)              # close clusters
clusters <- parallel::detectCores()          # number of jobs simultaneously
cl <- parallel::makeCluster(clusters)  # make clusters
doSNOW::registerDoSNOW(cl)             # use the above clusters
set.seed(761) # 524.530 sequential // 241.483 parallel4
system.time(modelfull <- epx(x = BN[,-25], y = BN[,25],
classifier.args = list(ntree = 150),
computing = "parallel"))
fullmodel$PHALANXES
# Functions to run in parallel
set.seed(761) # 524.530 sequential // 241.483 parallel4
system.time(fullmodel <- epx(x = BN[,-25], y = BN[,25],
classifier.args = list(ntree = 150),
computing = "parallel"))
fullmodel$PHALANXES
parallel::stopCluster(cl)  # close clusters
model.nn <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "neural",
classifier.args = list(size = 2))
cv.nn <- cv.epx(model.nn)
tail(cv.nn)
model.log <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "logistic")
cv.log <- cv.epx(model.log)
tail(cv.log)
set.seed(161)
BNsampleCV <- cv.epx(BNsampleEPX, compare = TRUE,
classifier.args = list(ntree = 500))
set.seed(761)
BNsampleEPX <- epx(x = BN[,-25], y = BN[,25],
classifier.args = list(ntree = 500))
set.seed(161)
BNsampleCV <- cv.epx(BNsampleEPX, compare = TRUE,
classifier.args = list(ntree = 500))
tail(BNsampleCV[[1]])
tail(BNsampleCV[[2]]) # RF
BNsampleCVnocomp <- cv.epx(BNsampleEPX,
classifier.args = list(ntree = 500))
tail(BNsampleCVnocomp)
BNpred.new <- predict(BNsampleEPX, newdata = BNhold[,-25],
classifier.args = list(ntree = 500))
AHR(y = BNhold$y, phat = BNpred.new)
nhold <- nrow(BNhold)
plot(x = 1:nhold, y = BNhold$y, pch = 8, cex = 2)
points(x = 1:nhold, y = BNpred.new, col = "red", cex = 2)
abline(h = 0.5)
plot(x = 1:nhold, y = BNhold$y, pch = 8, cex = 2)
plot(x = 1:nhold, y = BNpred.new, pch = 8, cex = 2)
plot(x = 1:nhold, y = BNhold$y, pch = 8, cex = 2)
points(x = 1:nhold, y = BNpred.new, col = "red", cex = 2)
abline(h = 0.5)
plot(BNhold$y, BNpred.new)
plot(BNsampleEPX)
IE(y = BNsample$y, phat = BNpreds)
IE(y = BNhold$y, phat = BNpred.new)
TOP1(y = BNhold$y, phat = BNpred.new) # correct
RKL(y = BNhold$y, phat = BNpred.new)
sort(BNpred.new[which(BNhold$y == 1)])
BNpreds <- predict(BNsampleEPX)
IE(y = BNsample$y, phat = BNpreds)
IE(y = BN$y, phat = BNpreds)
IE(y = BNhold$y, phat = BNpred.new)
TOP1(y = BNhold$y, phat = BNpred.new) # correct
RKL(y = BNhold$y, phat = BNpred.new)
sort(BNpred.new[which(BNhold$y == 1)])
set.seed(761)
system.time(BNsampleEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "IE",
classifier.args = list(ntree = 150)))
set.seed(761)
system.time(BNsampleEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier.args = list(ntree = 500)))
BNpreds <- predict(BNsampleEPX)
set.seed(161)
BNsampleCV <- cv.epx(BNsampleEPX, compare = TRUE,
classifier.args = list(ntree = 500))
tail(BNsampleCV[[1]])
tail(BNsampleCV[[2]]) # RF
BNsampleCVnocomp <- cv.epx(BNsampleEPX,
classifier.args = list(ntree = 500))
tail(BNsampleCVnocomp)
BNpred.new <- predict(BNsampleEPX, newdata = BNhold[,-25],
classifier.args = list(ntree = 500))
AHR(y = BNhold$y, phat = BNpred.new)
nhold <- nrow(BNhold)
plot(x = 1:nhold, y = BNhold$y, pch = 8, cex = 2)
points(x = 1:nhold, y = BNpred.new, col = "red", cex = 2)
abline(h = 0.5)
plot(BNhold$y, BNpred.new)
plot(BNsampleEPX)
IE(y = BNsample$y, phat = BNpreds)
IE(y = BNhold$y, phat = BNpred.new)
TOP1(y = BNhold$y, phat = BNpred.new) # correct
RKL(y = BNhold$y, phat = BNpred.new)
sort(BNpred.new[which(BNhold$y == 1)])
set.seed(761)
system.time(BNsampleEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "IE",
classifier.args = list(ntree = 150)))
summary(BNsampleEPX)
BNpreds <- predict(BNsampleEPX, classifier.args = list(ntree = 500))
IE(y = BNsample$y, phat = BNpreds)
AHR(y = BNsample$y, phat = BNpreds)
set.seed(761)
system.time(top1EPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "TOP1",
classifier.args = list(ntree = 150)))
summary(top1EPX)
top1preds <- predict(top1EPX, classifier.args = list(ntree = 500))
IE(y = BNsample$y, phat = top1preds)
AHR(y = BNsample$y, phat = top1preds)
top1cv <- cv.epx(top1EPX, classifier.args = list(ntree = 500))
AHR(y = BNsample$y, phat = top1cv[1:1000, 23]) # still beats RF
set.seed(761)
system.time(rklEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "RKL",
classifier.args = list(ntree = 150)))
summary(rklEPX)
set.seed(761)
system.time(AHR.log <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier = "logistic"))
summary(AHR.log)
preds.AHRlog <- predict(AHR.log)
AHR(y = BNsample$y, phat = preds.AHRlog) # better than RF...
logcv <- cv.epx(AHR.log)
tail(logcv)  # slightly better than RF
tail(BNsampleCV[[2]])
set.seed(761)
system.time(AHR.nn <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier = "neural"))
summary(AHR.nn)
preds.AHRnn <- predict(AHR.nn)
AHR(y = BNsample$y, phat = preds.AHRnn) # better than RF...
nncv <- cv.epx(AHR.nn)
tail(nncv)  # slightly better than RF
tail(BNsampleCV[[2]])
plot(x = 1:1000, y = BNsample$y, pch = 8, cex = 2)
points(x = 1:1000, y = BNpreds.AHR, col = "blue", cex = 2)
points(x = 1:1000, y = BNpreds, col = "red", cex = 2)
points(x = 1:1000, y = top1preds, col = "pink", cex = 2)
points(x = 1:1000, y = preds.AHRlog, col = "purple", cex = 2)
points(x = 1:1000, y = preds.AHRnn, col = "yellow", cex = 2)
points(x = 1:1000, y = RFpreds, col = "green", cex = 1)
abline(h = 0.5)
library(epx)
set.seed(761)
model <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier.args = list(ntree = 150))
str(model)
summary(model)
model
library(epx)
library(usethis)
usethis::use_testthat()
library(testthat)
y <- c(rep(1, 10), rep(0, 10))
phat <- seq(1, 0, length = length(y))
Metric <- AHR(y, phat)
Metric
library(epx)
library(epx)
y <- c(rep(1, 10), rep(0, 10))
phat <- seq(1, 0, length = length(y))
Metric <- TOP1(y, phat)
Metric
y <- c(rep(1, 10), rep(0, 10))
phat <- seq(1, 0, length = length(y))
Metric <- RKL(y, phat)
Metric
y <- c(rep(1, 10), rep(0, 10))
phat <- seq(1, 0, length = length(y))
Metric <- IE(y, phat)
Metric
library(epx)
BNsample
dim(BNsample)
dim(BNhold)
harvest
dim(harvest)
set.seed(761)
model <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier.args = list(ntree = 150))
pred <- predict(model, newdata = BNhold, classifier.args = list(ntree = 500))
expect_equal(length(pred), dim(BNhold)[[1]])
length(pred)
model
pred <- predict(model, newdata = BNhold, classifier.args = list(ntree = 500))
library(epx)
library(epx)
library(epx)
devtools::build(build_args = c('--compact-vignettes=both'))
library(devtools)
devtools::build(build_args = c('--compact-vignettes=both'))
install.packages("qpdf")
library(qpdf)
library(qpdf)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(usethis)
usethis::use_pkgdown()
usethis::use_pkgdown()
library(epx)
library(usethis)
usethis::use_pkgdown()
library(devtools)
devtools::check()
devtools::document()
library(epx)
library(usethis)
usethis::use_build_ignore("epx-Ex_i386")
usethis::use_build_ignore("epx-Ex_x64.Rout")
usethis::use_build_ignore("examples_i386")
usethis::use_build_ignore("examples_x64")
usethis::use_build_ignore("tests_i386")
usethis::use_build_ignore("tests_x64")
library(epx)
library(usethis)
usethis::use_build_ignore("epx.Rcheck")
library(epx)
library(epx)
library(epx)
library(epx)
AHR(c(rep(1,10),rep(0,10)),seq(1,0,length=10))
AHR(c(rep(1,10),rep(0,10)),seq(1,0,length=20))
library(devtools)
devtools::check(cran = FALSE)
library(epx)
library(epx)
?epx
library(devtools)
devtools::test()
devtools::run_examples()
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
?hitcurve
library(epx)
?hit.curve
library(epx)
library(epx)
?AHR
library(epx)
?AHR
?epx
library(epx)
?epx
library(randomForest)
?randomForest
library(epx)
?epx
library(epx)
library(epx)
?cv.epx
library(epx)
?predict
?predict.epx
library(epx)
model <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "random forest", performance.args = list(ntree = 500))
str(model)
model$PHALANXES
predict(model)
plot(model)
library(epx)
library(epx)
library(epx)
devtools::build_win()
rm(list = ls())
R CMD INSTALL epx_1.0.0.tar.gz
library(epx)
library(epx)
library(epx)
library(epx)
model <- epx(x = BNsample[,-25], y = BNsample[,-25])
model <- epx(x = BNsample[,-25], y = BNsample[,25])
str(model)
model$PHALANXES
plot(model)
BN <- rbind(BNsample, BNhold)
model <- epx(x = BN[,-25], y = BN[,25])
plot(model)
AHR(BNhold[,25], predict(model, BNhold[,-25]))
IE(BNhold[,25], predict(model, BNhold[,-25]))
TOP1(BNhold[,25], predict(model, BNhold[,-25]))
RKL(BNhold[,25], predict(model, BNhold[,-25]))
model <- epx(x = BNsample[,-25], y = BNsample[,25])
plot(model)
AHR(BNhold[,25], predict(model, BNhold[,-25]))
IE(BNhold[,25], predict(model, BNhold[,-25]))
TOP1(BNhold[,25], predict(model, BNhold[,-25]))
RKL(BNhold[,25], predict(model, BNhold[,-25]))
library(epx)
model <- epx(x = harvest[,-4], y = harvest[,4])
library(epx)
model <- epx(x = harvest[,-4], y = harvest[,4])
plot(model)
predict(model)
library(epx)
model <- epx(x = BNsample[,-25], y = BNsample[,25])
plot(model)
library(epx)
library(epx)
?epx
library(epx)
library(epx)
library(epx)
library(epx)
library(epx)
library(EPX)
library(EPX)
library(EPX)
?cat
?message
library(EPX)
install.packages("doParallel")
library(doParallel)
library(EPX)
library(EPX)
table(BNsample$y)
set.seed(761)
model <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier.args = list(ntree = 150))
str(model)
summary(model)
plot(model)
preds0 <- predict(model)
all.equal(preds0, model$ENSEMBLED.FITS)
set.seed(761)
preds <- predict(model, classifier.args = list(ntree = 500))
all.equal(preds, model$ENSEMBLED.FITS)
set.seed(761)
predshold0 <- predict(model, newdata = BNhold[,-25])
set.seed(761)
predshold <- predict(model, newdata = BNhold[,-25],
classifier.args = list(ntree = 500))
AHR(y = model$Y, phat = preds0)
AHR(y = model$Y, phat = preds)
AHR(y = BNhold[,25], phat = predshold0)
AHR(y = BNhold[,25], phat = predshold)
set.seed(761)
cv150 <- cv.epx(model)
tail(cv150)
set.seed(761)
cv500 <- cv.epx(model, classifier.args = list(ntree = 500))
tail(cv500)
set.seed(761)
cv.compare <- cv.epx(model, classifier.args = list(ntree = 500), folds.out = TRUE)
tail(cv.compare[[1]])
tail(cv.compare[[2]])
AHR(y = BNhold$y, phat = predshold)
IE(y = BNhold$y, phat = predshold)
TOP1(y = BNhold$y, phat = predshold)
RKL(y = BNhold$y, phat = predshold)
rank <- (BNhold$y)[order(predshold)]
which(rank == 1)
BN <- rbind(BNsample, BNhold)
clusters <- parallel::detectCores()
cl <- parallel::makeCluster(clusters)  # make clusters
doParallel::registerDoParallel(cl)             # use the above clusters
set.seed(761) # 524.530 sequential // 241.483 parallel4
system.time(modelfull <- epx(x = BN[,-25], y = BN[,25],
classifier.args = list(ntree = 150),
computing = "parallel"))
fullmodel$PHALANXES
modelfull$PHALANXES
parallel::stopCluster(cl)  # close clusters
model.nn <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "neural",
classifier.args = list(size = 2))
cv.nn <- cv.epx(model.nn)
tail(cv.nn)
model.log <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "logistic")
cv.log <- cv.epx(model.log)
tail(cv.log)
set.seed(161)
BNsampleCV <- cv.epx(BNsampleEPX, compare = TRUE,
classifier.args = list(ntree = 500))
table(BNsample$y)
set.seed(761)
model <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier.args = list(ntree = 150))
str(model)
summary(model)
plot(model)
preds0 <- predict(model)
all.equal(preds0, model$ENSEMBLED.FITS)
set.seed(761)
preds <- predict(model, classifier.args = list(ntree = 500))
all.equal(preds, model$ENSEMBLED.FITS)
set.seed(761)
predshold0 <- predict(model, newdata = BNhold[,-25])
set.seed(761)
predshold <- predict(model, newdata = BNhold[,-25],
classifier.args = list(ntree = 500))
AHR(y = model$Y, phat = preds0)
AHR(y = model$Y, phat = preds)
AHR(y = BNhold[,25], phat = predshold0)
AHR(y = BNhold[,25], phat = predshold)
set.seed(761)
cv150 <- cv.epx(model)
tail(cv150)
set.seed(761)
cv500 <- cv.epx(model, classifier.args = list(ntree = 500))
tail(cv500)
set.seed(761)
cv.compare <- cv.epx(model, classifier.args = list(ntree = 500), folds.out = TRUE)
tail(cv.compare[[1]])
tail(cv.compare[[2]])
AHR(y = BNhold$y, phat = predshold)
IE(y = BNhold$y, phat = predshold)
TOP1(y = BNhold$y, phat = predshold)
RKL(y = BNhold$y, phat = predshold)
rank <- (BNhold$y)[order(predshold)]
which(rank == 1)
BN <- rbind(BNsample, BNhold)
clusters <- parallel::detectCores()          # number of jobs simultaneously
cl <- parallel::makeCluster(clusters)  # make clusters
doParallel::registerDoParallel(cl)             # use the above clusters
set.seed(761) # 524.530 sequential // 241.483 parallel4
system.time(fullmodel <- epx(x = BN[,-25], y = BN[,25],
classifier.args = list(ntree = 150),
computing = "parallel"))
fullmodel$PHALANXES
parallel::stopCluster(cl)  # close clusters
model.nn <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "neural",
classifier.args = list(size = 2))
cv.nn <- cv.epx(model.nn)
tail(cv.nn)
model.log <- epx(x = BNsample[,-25], y = BNsample[,25], classifier = "logistic")
cv.log <- cv.epx(model.log)
tail(cv.log)
set.seed(761)
system.time(BNsampleEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier.args = list(ntree = 500)))
BNpreds <- predict(BNsampleEPX)
set.seed(161)
BNsampleCV <- cv.epx(BNsampleEPX, compare = TRUE,
classifier.args = list(ntree = 500))
tail(BNsampleCV[[1]])
tail(BNsampleCV[[2]]) # RF
BNsampleCVnocomp <- cv.epx(BNsampleEPX,
classifier.args = list(ntree = 500))
tail(BNsampleCVnocomp)
BNpred.new <- predict(BNsampleEPX, newdata = BNhold[,-25],
classifier.args = list(ntree = 500))
AHR(y = BNhold$y, phat = BNpred.new)
nhold <- nrow(BNhold)
plot(x = 1:nhold, y = BNhold$y, pch = 8, cex = 2)
points(x = 1:nhold, y = BNpred.new, col = "red", cex = 2)
abline(h = 0.5)
plot(BNsampleEPX)
IE(y = BNsample$y, phat = BNpreds)
IE(y = BNhold$y, phat = BNpred.new)
TOP1(y = BNhold$y, phat = BNpred.new) # correct
RKL(y = BNhold$y, phat = BNpred.new)
sort(BNpred.new[which(BNhold$y == 1)])
set.seed(761)
system.time(BNsampleEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "IE",
classifier.args = list(ntree = 150)))
summary(BNsampleEPX)
BNpreds <- predict(BNsampleEPX, classifier.args = list(ntree = 500))
IE(y = BNsample$y, phat = BNpreds)
AHR(y = BNsample$y, phat = BNpreds)
set.seed(761)
system.time(top1EPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "TOP1",
classifier.args = list(ntree = 150)))
summary(top1EPX)
top1preds <- predict(top1EPX, classifier.args = list(ntree = 500))
IE(y = BNsample$y, phat = top1preds)
AHR(y = BNsample$y, phat = top1preds)
top1cv <- cv.epx(top1EPX, classifier.args = list(ntree = 500))
AHR(y = BNsample$y, phat = top1cv[1:1000, 23]) # still beats RF
set.seed(761)
system.time(rklEPX <- epx(x = BNsample[,-25], y = BNsample[,25],
performance = "RKL",
classifier.args = list(ntree = 150)))
summary(rklEPX)
set.seed(761)
system.time(AHR.log <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier = "logistic"))
summary(AHR.log)
preds.AHRlog <- predict(AHR.log)
AHR(y = BNsample$y, phat = preds.AHRlog) # better than RF...
logcv <- cv.epx(AHR.log)
tail(logcv)  # slightly better than RF
tail(BNsampleCV[[2]])
set.seed(761)
system.time(AHR.nn <- epx(x = BNsample[,-25], y = BNsample[,25],
classifier = "neural"))
summary(AHR.nn)
preds.AHRnn <- predict(AHR.nn)
AHR(y = BNsample$y, phat = preds.AHRnn) # better than RF...
nncv <- cv.epx(AHR.nn)
tail(nncv)  # slightly better than RF
tail(BNsampleCV[[2]])
